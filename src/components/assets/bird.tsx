'use client';
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: alexi.smnd (https://sketchfab.com/alexi.smnd  )
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lowpoly-humming-bird-animated-abc35c5c30fc44c282188c3065a6daf0
Title: LowPoly humming-bird animated
*/

import * as THREE from 'three';
import React, { JSX, useRef, useEffect } from 'react';
import { useGLTF, useAnimations, OrbitControls } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { Canvas } from '@react-three/fiber';

// Define the expected GLTF structure
type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.SkinnedMesh;
    Object_8: THREE.SkinnedMesh;
    Object_9: THREE.SkinnedMesh;
    GLTF_created_0_rootJoint: THREE.Bone;
  };
  materials: {
    Kolibri: THREE.MeshStandardMaterial;
    Eyes: THREE.MeshStandardMaterial;
    Claws: THREE.MeshStandardMaterial;
  };
};

// Define the available animation names
type ActionName = 'ArmatureAction.002'; // Adjust if the animation name differs

// Model component - must be used inside <Canvas>
function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!); // Use non-null assertion as ref is initialized by R3F
  const { nodes, materials, animations } = useGLTF(
    '/scene.gltf'
  ) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    // Play the animation when component mounts
    // The animation name might be different; check the console log below
    console.log(
      'Available animations:',
      animations.map((clip) => clip.name)
    ); // Log available animation names
    const actionName: ActionName = 'ArmatureAction.002'; // Use the correct name from the log
    if (actions[actionName]) {
      actions[actionName].play();
    } else {
      // Fallback: Play the first available animation
      const firstClipName = animations[0]?.name;
      if (firstClipName && actions[firstClipName]) {
        actions[firstClipName].play();
      } else {
        console.warn('No animation found to play.');
      }
    }
  }, [actions, animations]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Armature_14">
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint} />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.Kolibri}
                    skeleton={nodes.Object_7.skeleton}
                  />
                  <skinnedMesh
                    name="Object_8"
                    geometry={nodes.Object_8.geometry}
                    material={materials.Eyes}
                    skeleton={nodes.Object_8.skeleton}
                  />
                  <skinnedMesh
                    name="Object_9"
                    geometry={nodes.Object_9.geometry}
                    material={materials.Claws}
                    skeleton={nodes.Object_9.skeleton}
                  />
                  <group name="Kolibri_13" />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

// Bird component - wraps Model in Canvas
export default function Bird() {
  return (
    <div className="h-full w-full sm:block ">
      {' '}
      {/* Adjust height as needed */}
      <Canvas className="border border-red-500">
        <ambientLight intensity={0.5} />
        <spotLight
          position={[10, 10, 10]}
          angle={0.15}
          penumbra={1}
          intensity={1}
        />
        <pointLight position={[-10, -10, -10]} intensity={0.5} />
        <Model />
        {/* <OrbitControls enableZoom={true} enablePan={false} /> */}
      </Canvas>
    </div>
  );
}

// Preload the model
useGLTF.preload('/scene.gltf');
